// Import gradle-git
import org.ajoberstar.gradle.git.tasks.*

// Apply the java plugin to add support for Java
apply plugin: 'java'

// I do not know for what this plugin is used
apply plugin: 'eclipse'

// Apply the Github pages plugin
apply plugin: 'github-pages'

version='0.1-ALPHA'

task setupClubManager



buildscript{
    
    repositories {
        
        // Use 'maven central' for resolving your dependencies.
        mavenCentral()
    }

    // In this section you declare the dependencies for your production and test code
    dependencies {
        // The production code uses the SLF4J logging API at compile time
        // compile 'org.slf4j:slf4j-api:1.7.5'

        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        // testCompile "junit:junit:4.11"

        // Use the Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}


// Import ANT tasks
// ant.importBuild 'ant/build.xml'

task (setupDitaOt, dependsOn: setupClubManager, type: GitClone) {
    def folder = new File( 'repositories/dita-ot' )
    if(!folder.exists()) {
        println 'DITA-OT is not available. Clone DITA-OT from GitHub...'
        setUri("http://remote.repository/")
        setDestinationPath("repositories/dita-ot")
        cloneRepo()
    } else {
        println 'DITA-OT is available, do nothing'
    }
}

task (cloneUmlGraph, dependsOn: setupClubManager) {
    def folder = new File('repositories/uml-graph')
    if(!folder.exists()) {
        println 'uml-graph is not available. Clone uml-graph from GitHub...'
        destinationPath = 'repositories/uml-graph'
        uri = 'https://github.com/dspinellis/UMLGraph.git'
    } else {
        println 'uml-graph is available, do nothing'
    }
}


//def onEachGitFolder(File folder, Closure closure) {
//    File gitServiceFolder = new File(folder, ".git")
//    if(gitServiceFolder.exists() && gitServiceFolder.isDirectory())
//        closure(folder)
//    else
//        folder.eachDir { subFolder ->
//        onEachGitFolder(subFolder, closure);
//    }
//}
//
//task pull
//
//onEachGitFolder projectDir, { folder ->
//    def taskName = folder.name + "_pull"
//    project.task (taskName, type: GitPull) {
//        setRepoPath folder.absolutePath
//    }
//    project.tasks.pull.dependsOn project.tasks[taskName]
//}
//
//defaultTasks "pull"
