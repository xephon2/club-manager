/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'stefan' at '13.11.13 23:08' with Gradle 1.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.8/userguide/tutorial_java_projects.html
 */

// Import gradle-git
import org.ajoberstar.gradle.git.tasks.*

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the Github pages plugin
apply plugin: 'github-pages'



buildscript{
    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use 'maven central' for resolving your dependencies.
        mavenCentral()
        // You can declare any Maven/Ivy/file repository here.
    }

    // In this section you declare the dependencies for your production and test code
    dependencies {
        // The production code uses the SLF4J logging API at compile time
        // compile 'org.slf4j:slf4j-api:1.7.5'

        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        // testCompile "junit:junit:4.11"

        // Use the Git plugin for Gradle
        classpath 'org.ajoberstar:gradle-git:0.6.3'
    }
}


// Import ANT tasks
ant.importBuild 'ant/build.xml'

//task cloneDITAOTGitRepo(type: GitClone) {
//        def destination = file("doc/DITA-OT")
//        uri = "git clone git://github.com/dita-ot/dita-ot.git"
//        destinationPath = destination
//        bare = false
//        enabled = !destination.exists() //to clone only once
//}

task cloneDitaOt(type: GitClone) {
    destinationPath = 'repositories/dita-ot'
    uri = 'git://github.com/dita-ot/dita-ot.git'
}

task cloneClubManager(type: GitClone) {
    destinationPath = 'repositories/club-manager'
    uri = 'git@github.com:xephon2/club-manager.git'
}

task cloneUmlGraph(type: GitClone) {
    destinationPath = 'repositories/uml-graph'
    uri = 'https://github.com/dspinellis/UMLGraph.git'
}

task setupClubManager() << {
    println 'setup the club-manager'
    cloneDitaOt()
}


def onEachGitFolder(File folder, Closure closure) {
  File gitServiceFolder = new File(folder, ".git")
  if(gitServiceFolder.exists() && gitServiceFolder.isDirectory())
    closure(folder)
  else
    folder.eachDir { subFolder ->
      onEachGitFolder(subFolder, closure);
    }
}

task pull

onEachGitFolder projectDir, { folder ->
  def taskName = folder.name + "_pull"
  project.task (taskName, type: GitPull) {
    setRepoPath folder.absolutePath
  }
  project.tasks.pull.dependsOn project.tasks[taskName]
}

defaultTasks "pull"